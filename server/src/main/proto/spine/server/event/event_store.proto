//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.event;

option (type_url_prefix) = "type.spine.io";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "EventStoreProto";
// Put generated code under the 'grpc' sub-package, which is annotated @SPI.
option java_package = "io.spine.server.event.grpc";

import "spine/options.proto";
import "spine/base/event.proto";
import "spine/base/response.proto";
import "spine/server/event/event_stream_query.proto";

// `EventStore` service allows to store events and read them via streams.
service EventStore {
    option (SPI_service) = true;

    // Request to append events to the storage.
    rpc Append(base.Event) returns (base.Response);

    // Provides events matching the query as a stream.
    rpc Read(EventStreamQuery) returns (stream base.Event);
}
